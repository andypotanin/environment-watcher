{
  "name": "grunt-haproxy",
  "description": "Haproxy handler.",
  "version": "0.1.0",
  "preferGlobal": true,
  "homepage": "https://github.com/UsabilityDynamics/grunt-haproxy",
  "author": {
    "name": "Andy Potanin",
    "email": "andy.potanin@usabilitydynamics.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/UsabilityDynamics/grunt-haproxy.git"
  },
  "bugs": {
    "url": "https://github.com/UsabilityDynamics/grunt-haproxy/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/UsabilityDynamics/grunt-haproxy/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-nodeunit": "~0.4.0",
    "grunt": "~0.4.5",
    "load-grunt-tasks": "~0.5.0",
    "findup-sync": "~0.1.3",
    "grunt-notify": "~0.3.0",
    "grunt-contrib-watch": "~0.6.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.5"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-haproxy\n\n> Haproxy handler.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.5`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-haproxy --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-haproxy');\n```\n\n## The \"haproxy\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `haproxy` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  haproxy: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n});\n```\n\n### Options\n\n#### options.separator\nType: `String`\nDefault value: `',  '`\n\nA string value that is used to do something with whatever.\n\n#### options.punctuation\nType: `String`\nDefault value: `'.'`\n\nA string value that is used to do something else with whatever else.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to do something with whatever. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\n\n```js\ngrunt.initConfig({\n  haproxy: {\n    options: {},\n    files: {\n      'dest/default_options': ['src/testing', 'src/123'],\n    },\n  },\n});\n```\n\n#### Custom Options\nIn this example, custom options are used to do something else with whatever else. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result in this case would be `Testing: 1 2 3 !!!`\n\n```js\ngrunt.initConfig({\n  haproxy: {\n    options: {\n      separator: ': ',\n      punctuation: ' !!!',\n    },\n    files: {\n      'dest/default_options': ['src/testing', 'src/123'],\n    },\n  },\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "readme.md",
  "_id": "grunt-haproxy@0.1.0",
  "_shasum": "91772ed9d720dda7dd19c972dfa3b40c9755e891",
  "_resolved": "git://github.com/UsabilityDynamics/grunt-haproxy#a07f85da3a627ec631f57c6c46b334bd4e290003",
  "_from": "git://github.com/UsabilityDynamics/grunt-haproxy",
  "_fromGithub": true
}
